// <auto-generated />
using System;
using Kanban_RMR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KanbanRMR.Migrations
{
    [DbContext(typeof(KanbanDbContext))]
    [Migration("20231201151752_InitialDBSetup")]
    partial class InitialDBSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kanban_RMR.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Intern"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Garvis"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.KanbanUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "675fc8fd-0beb-4db9-b7e2-cd2f70b04332",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b479e6d-873a-4453-96ef-8239f7515164",
                            Customer = 1,
                            Email = "admin@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "admin@testemail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEHoBzzDj7gMGTy8x6VRHMY35B+3jiYtmCZykFFhnq50P4k9+QQQUCWuK+k0/PAWpig==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d1754ddf-7372-4662-bdbc-6b925f80fd8a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "e1609bd5-57f8-44b9-9f5b-1d707fc5ffdf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "666a0a10-5065-40e6-a1e4-3ce07f8dc613",
                            Customer = 1,
                            Email = "empl1@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl1",
                            NormalizedEmail = "empl1@testemail.com",
                            NormalizedUserName = "empl1",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdRjZxBw2aG6ORRr0QPRvOzi83G+r2U0EvC6/b4mCuhbI2i/6d0ewIDFVsOb+cXvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e15894e-97df-428a-9468-94df6c370a2f",
                            TwoFactorEnabled = false,
                            UserName = "empl1"
                        },
                        new
                        {
                            Id = "7a1c79ae-6fb9-401c-9d5b-38b95eb7c35d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52489484-c174-4dc7-a87a-230e32bff9d9",
                            Customer = 1,
                            Email = "empl2@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl2",
                            NormalizedEmail = "empl2@testemail.com",
                            NormalizedUserName = "empl2",
                            PasswordHash = "AQAAAAIAAYagAAAAELiSHUxw+O33p1+kPNh7Wk7G7Xc5ON9hxIdMfZ4woQUp6DZECiH04xV1mIJslisOwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b8b471e-d167-4c4e-9c37-c1035bb021ab",
                            TwoFactorEnabled = false,
                            UserName = "empl2"
                        },
                        new
                        {
                            Id = "8a6fd090-868c-4240-b65f-1460b09b6bed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fae4dab-b417-41a9-b934-fd877e6d81d0",
                            Customer = 2,
                            Email = "garvis1@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "garvis1",
                            NormalizedEmail = "garvis1@testemail.com",
                            NormalizedUserName = "garvis1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIs4xp8CQ8Mc+dyx8yS9p/S9yOJ0GW//gbykrVvEh/XpfMXm9TbDMGqNPLrdlYIofg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5ec7ca6-7cfd-4500-8e27-9e11568a0e8d",
                            TwoFactorEnabled = false,
                            UserName = "garvis1"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#f7f7ed",
                            Description = "Minor"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#fcfc03",
                            Description = "Major"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#fcba03",
                            Description = "Critical"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#fc5a03",
                            Description = "Blocking"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Customer = 1,
                            Name = "Intern1"
                        },
                        new
                        {
                            Id = 2,
                            Customer = 1,
                            Name = "Intern2"
                        },
                        new
                        {
                            Id = 3,
                            Customer = 2,
                            Name = "Project1"
                        },
                        new
                        {
                            Id = 4,
                            Customer = 2,
                            Name = "Project2"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "CreatedTicket",
                            Enabled = true,
                            Points = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = "CreatedDuplicateTicket",
                            Enabled = true,
                            Points = -1
                        },
                        new
                        {
                            Id = 3,
                            Action = "MoveToDone",
                            Enabled = true,
                            Points = 1
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Analysis"
                        },
                        new
                        {
                            Id = 3,
                            Description = "In progress"
                        },
                        new
                        {
                            Id = 4,
                            Description = "In review"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Done"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Effort")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Project")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "e1609bd5-57f8-44b9-9f5b-1d707fc5ffdf",
                            CreatedOn = new DateTime(2023, 12, 1, 16, 17, 51, 997, DateTimeKind.Local).AddTicks(8742),
                            Customer = 1,
                            Description = "internal ticket1",
                            Priority = 1,
                            Project = 1,
                            Status = 1,
                            Title = "IntTicket1",
                            Type = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "e1609bd5-57f8-44b9-9f5b-1d707fc5ffdf",
                            CreatedOn = new DateTime(2023, 12, 1, 16, 17, 51, 997, DateTimeKind.Local).AddTicks(8820),
                            Customer = 1,
                            Description = "internal ticket2",
                            Priority = 2,
                            Project = 1,
                            Status = 1,
                            Title = "IntTicket2",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "7a1c79ae-6fb9-401c-9d5b-38b95eb7c35d",
                            CreatedOn = new DateTime(2023, 12, 1, 16, 17, 51, 997, DateTimeKind.Local).AddTicks(8827),
                            Customer = 1,
                            Description = "internal ticket3",
                            Priority = 3,
                            Project = 1,
                            Status = 1,
                            Title = "IntTicket3",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "8a6fd090-868c-4240-b65f-1460b09b6bed",
                            CreatedOn = new DateTime(2023, 12, 1, 16, 17, 51, 997, DateTimeKind.Local).AddTicks(8832),
                            Customer = 2,
                            Description = "Ticket Description1",
                            Priority = 1,
                            Project = 2,
                            Status = 1,
                            Title = "Ticket1",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "8a6fd090-868c-4240-b65f-1460b09b6bed",
                            CreatedOn = new DateTime(2023, 12, 1, 16, 17, 51, 997, DateTimeKind.Local).AddTicks(8838),
                            Customer = 2,
                            Description = "Ticket Description2",
                            Priority = 5,
                            Project = 2,
                            Status = 1,
                            Title = "Ticket2",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "8a6fd090-868c-4240-b65f-1460b09b6bed",
                            CreatedOn = new DateTime(2023, 12, 1, 16, 17, 51, 997, DateTimeKind.Local).AddTicks(8843),
                            Customer = 2,
                            Description = "Ticket Description3",
                            Priority = 2,
                            Project = 4,
                            Status = 1,
                            Title = "Ticket3",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bug"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Feature"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Improvement"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9fe81b61-725d-480f-81ee-59b0be12de88",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "4510d37e-d0d5-49c9-aee4-2f5f5e36c622",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "675fc8fd-0beb-4db9-b7e2-cd2f70b04332",
                            RoleId = "9fe81b61-725d-480f-81ee-59b0be12de88"
                        },
                        new
                        {
                            UserId = "e1609bd5-57f8-44b9-9f5b-1d707fc5ffdf",
                            RoleId = "9fe81b61-725d-480f-81ee-59b0be12de88"
                        },
                        new
                        {
                            UserId = "7a1c79ae-6fb9-401c-9d5b-38b95eb7c35d",
                            RoleId = "4510d37e-d0d5-49c9-aee4-2f5f5e36c622"
                        },
                        new
                        {
                            UserId = "8a6fd090-868c-4240-b65f-1460b09b6bed",
                            RoleId = "4510d37e-d0d5-49c9-aee4-2f5f5e36c622"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
