// <auto-generated />
using System;
using Kanban_RMR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KanbanRMR.Migrations
{
    [DbContext(typeof(KanbanDbContext))]
    partial class KanbanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kanban_RMR.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Kanban_RMR.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Intern"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Garvis"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.KanbanUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Penalties")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01d5f1e3-8791-4924-bb2c-a4153383492c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bb55c3f-6fbc-4853-bd4b-547dc8f683ac",
                            CustomerId = 1,
                            Email = "admin@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "admin@testemail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEEoP0z7nxxe4wG7GqKB45SOH06TtabCDkNcFePuT4bcPNnssbvf4RGWJFPoCPMGRrA==",
                            Penalties = 0,
                            PhoneNumberConfirmed = true,
                            Points = 0,
                            SecurityStamp = "0858bb38-8c97-4b1e-b650-f46e64727e6c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            deleted = false
                        },
                        new
                        {
                            Id = "a275286d-59d2-4060-b047-c1a1d7ccd460",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "222e2f66-426f-40b9-be59-3e06f2ab6822",
                            CustomerId = 1,
                            Email = "empl1@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl1",
                            NormalizedEmail = "empl1@testemail.com",
                            NormalizedUserName = "empl1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRot0fkf1QDnM+Gfzu3io5/WYDzQ5sbaGXqd3yQs1s/zMrQ53f4542gPJhXyyXvSw==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "a05b2bb5-9187-4101-9f14-bbeb9f9c27f3",
                            TwoFactorEnabled = false,
                            UserName = "empl1",
                            deleted = false
                        },
                        new
                        {
                            Id = "21f98a97-5fa3-476a-a783-6d5802491050",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84b464be-e795-4140-8708-6bc66b8696a9",
                            CustomerId = 1,
                            Email = "empl2@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl2",
                            NormalizedEmail = "empl2@testemail.com",
                            NormalizedUserName = "empl2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJxOUuC8T2BdOO+IljsP+lPcklUIdQlrhPxAvKrvq0zNB82La4fh9EMoB+lD1iaLyA==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "dbcc3ca5-b64b-4753-8c28-bf5d107fba31",
                            TwoFactorEnabled = false,
                            UserName = "empl2",
                            deleted = false
                        },
                        new
                        {
                            Id = "35f4a031-3b7a-46d8-b13d-34ab024d5a0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e921558-6dcb-4d13-927d-718d6afee4c5",
                            CustomerId = 2,
                            Email = "garvis1@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "garvis1",
                            NormalizedEmail = "garvis1@testemail.com",
                            NormalizedUserName = "garvis1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOfg6WjspbC5JQrUFDzYeOg+9sDhWGb+tfMsI7UNjsSbphM7h0guJ2yUZTVAxkabLw==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "b6e8ac3e-035d-4f22-80c9-04746e879440",
                            TwoFactorEnabled = false,
                            UserName = "garvis1",
                            deleted = false
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#f7f7ed",
                            Deleted = false,
                            Description = "Minor"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#fcfc03",
                            Deleted = false,
                            Description = "Major"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#fcba03",
                            Deleted = false,
                            Description = "Critical"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#fc5a03",
                            Deleted = false,
                            Description = "Blocking"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Deleted = false,
                            Name = "InternProject1"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            Deleted = false,
                            Name = "InternProject2"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            Deleted = false,
                            Name = "Project1"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            Deleted = false,
                            Name = "Project2"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "CreatedTicket",
                            Deleted = false,
                            Enabled = true,
                            Points = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = "CreatedDuplicateTicket",
                            Deleted = false,
                            Enabled = true,
                            Points = -1
                        },
                        new
                        {
                            Id = 3,
                            Action = "MoveToDone",
                            Deleted = false,
                            Enabled = true,
                            Points = 1
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Description = "Analysis"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Description = "In progress"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Description = "In review"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Description = "Done"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Effort")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "a275286d-59d2-4060-b047-c1a1d7ccd460",
                            CreatedOn = new DateTime(2023, 12, 18, 21, 11, 55, 688, DateTimeKind.Local).AddTicks(6932),
                            CustomerId = 1,
                            Deleted = false,
                            Description = "internal ticket1",
                            Index = 1,
                            PriorityId = 1,
                            ProjectId = 1,
                            StatusId = 1,
                            Title = "IntTicket1",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "a275286d-59d2-4060-b047-c1a1d7ccd460",
                            CreatedOn = new DateTime(2023, 12, 18, 21, 11, 55, 688, DateTimeKind.Local).AddTicks(7021),
                            CustomerId = 1,
                            Deleted = false,
                            Description = "internal ticket2",
                            Index = 2,
                            PriorityId = 2,
                            ProjectId = 1,
                            StatusId = 1,
                            Title = "IntTicket2",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "21f98a97-5fa3-476a-a783-6d5802491050",
                            CreatedOn = new DateTime(2023, 12, 18, 21, 11, 55, 688, DateTimeKind.Local).AddTicks(7030),
                            CustomerId = 1,
                            Deleted = false,
                            Description = "internal ticket3",
                            Index = 3,
                            PriorityId = 3,
                            ProjectId = 2,
                            StatusId = 1,
                            Title = "IntTicket3",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "35f4a031-3b7a-46d8-b13d-34ab024d5a0c",
                            CreatedOn = new DateTime(2023, 12, 18, 21, 11, 55, 688, DateTimeKind.Local).AddTicks(7037),
                            CustomerId = 2,
                            Deleted = false,
                            Description = "Ticket Description1",
                            Index = 1,
                            PriorityId = 1,
                            ProjectId = 3,
                            StatusId = 1,
                            Title = "Ticket1",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "35f4a031-3b7a-46d8-b13d-34ab024d5a0c",
                            CreatedOn = new DateTime(2023, 12, 18, 21, 11, 55, 688, DateTimeKind.Local).AddTicks(7044),
                            CustomerId = 2,
                            Deleted = false,
                            Description = "Ticket Description2",
                            Index = 2,
                            PriorityId = 4,
                            ProjectId = 3,
                            StatusId = 1,
                            Title = "Ticket2",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "35f4a031-3b7a-46d8-b13d-34ab024d5a0c",
                            CreatedOn = new DateTime(2023, 12, 18, 21, 11, 55, 688, DateTimeKind.Local).AddTicks(7051),
                            CustomerId = 2,
                            Deleted = false,
                            Description = "Ticket Description3",
                            Index = 3,
                            PriorityId = 2,
                            ProjectId = 4,
                            StatusId = 1,
                            Title = "Ticket3",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "Bug"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Description = "Feature"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Description = "Improvement"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bbc0a426-0973-4f3f-9b85-04ce5de3f0ca",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "a576e28e-d1a7-4ddb-84b9-e0843ad98922",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "01d5f1e3-8791-4924-bb2c-a4153383492c",
                            RoleId = "bbc0a426-0973-4f3f-9b85-04ce5de3f0ca"
                        },
                        new
                        {
                            UserId = "a275286d-59d2-4060-b047-c1a1d7ccd460",
                            RoleId = "bbc0a426-0973-4f3f-9b85-04ce5de3f0ca"
                        },
                        new
                        {
                            UserId = "21f98a97-5fa3-476a-a783-6d5802491050",
                            RoleId = "bbc0a426-0973-4f3f-9b85-04ce5de3f0ca"
                        },
                        new
                        {
                            UserId = "35f4a031-3b7a-46d8-b13d-34ab024d5a0c",
                            RoleId = "a576e28e-d1a7-4ddb-84b9-e0843ad98922"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Kanban_RMR.Models.Comment", b =>
                {
                    b.HasOne("Kanban_RMR.Models.Ticket", null)
                        .WithMany("TBL_Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", "KanbanUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.TicketType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("KanbanUser");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.Navigation("TBL_Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
