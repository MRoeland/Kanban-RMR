// <auto-generated />
using System;
using Kanban_RMR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KanbanRMR.Migrations
{
    [DbContext(typeof(KanbanDbContext))]
    [Migration("20240124193809_initialDBSetup")]
    partial class initialDBSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kanban_RMR.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TicketId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Kanban_RMR.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Intern"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Garvis"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.KanbanUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Penalties")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "daf93f3f-45dd-40dc-ae46-b17eebf520e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96b95441-1512-41f0-807a-7473c5257261",
                            CustomerId = 1,
                            Email = "admin@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "admin@testemail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAECKief5EM2rI7NPE+CYPsUtrGZiYRwRdh/cu+zuN0aTuwmZJRexFBCaNMm21bTcPww==",
                            Penalties = 0,
                            PhoneNumberConfirmed = true,
                            Points = 0,
                            SecurityStamp = "b1b6ed8a-53c7-4ccd-9877-5002e6d7e026",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            deleted = false
                        },
                        new
                        {
                            Id = "b79d6b4c-8ff6-42c6-ad76-38247bfc447b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcfb0597-0e86-4a09-810f-cf566cce8052",
                            CustomerId = 1,
                            Email = "empl1@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl1",
                            NormalizedEmail = "empl1@testemail.com",
                            NormalizedUserName = "empl1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHMbDAZNVEw9GfzycLyw7xrQAw1i00ktK7dMuSfJ4Tza6TZI40IZREFj9HFrhJqjOQ==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 2,
                            SecurityStamp = "488af5c2-2e50-4aad-abed-9161d2b520a9",
                            TwoFactorEnabled = false,
                            UserName = "empl1",
                            deleted = false
                        },
                        new
                        {
                            Id = "d19c9551-5000-48df-ad83-9e4ea8cba3e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d59b72ab-cfeb-4c06-8f9e-3453253d0eb8",
                            CustomerId = 1,
                            Email = "empl2@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl2",
                            NormalizedEmail = "empl2@testemail.com",
                            NormalizedUserName = "empl2",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2FE/q5KJOwNBvjSTSorQH9jorrgyuiLWmTIOeJGvMrlVcp/w85Q7qsI1gnN+WAOw==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 1,
                            SecurityStamp = "8a1df346-f03d-4397-bb32-f9c0a52a439a",
                            TwoFactorEnabled = false,
                            UserName = "empl2",
                            deleted = false
                        },
                        new
                        {
                            Id = "fb16d5f6-af58-45c5-836e-282359f8b193",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dcbc9d3-622b-45fc-8ee0-e4c22ab569ce",
                            CustomerId = 1,
                            Email = "empl3@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "empl3",
                            NormalizedEmail = "empl3testemail.com",
                            NormalizedUserName = "empl3",
                            PasswordHash = "AQAAAAIAAYagAAAAELRDpoFU8jP2WG43OK5w50U2SKQSMDshesi/KVbGYVVLBFe997PVx6YjlGV9hS5gkw==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "6ce011ac-e9d5-453c-8d58-c9aa0ed03208",
                            TwoFactorEnabled = false,
                            UserName = "empl3",
                            deleted = false
                        },
                        new
                        {
                            Id = "eeb1bb63-6ee1-48d6-b025-7e1468dc59ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1458936e-e39d-445c-b69e-70113937c81b",
                            CustomerId = 2,
                            Email = "garvis1@testemail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "garvis1",
                            NormalizedEmail = "garvis1@testemail.com",
                            NormalizedUserName = "garvis1",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMDZS6iqZH1oemHdOpLpGxo8k3XzI5mC/zaYf6AVwiOiLN20uXCXzT/uk4dhfQfNw==",
                            Penalties = 0,
                            PhoneNumberConfirmed = false,
                            Points = 1,
                            SecurityStamp = "58f0e328-27c6-4085-bea1-bc537907f04c",
                            TwoFactorEnabled = false,
                            UserName = "garvis1",
                            deleted = false
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#f7f7ed",
                            Deleted = false,
                            Description = "Minor"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#fcfc03",
                            Deleted = false,
                            Description = "Major"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#fcba03",
                            Deleted = false,
                            Description = "Critical"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#fc5a03",
                            Deleted = false,
                            Description = "Blocking"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Deleted = false,
                            Name = "InternProject1"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            Deleted = false,
                            Name = "InternProject2"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            Deleted = false,
                            Name = "Project1"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            Deleted = false,
                            Name = "Project2"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reward");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "CreatedTicket",
                            Deleted = false,
                            Enabled = true,
                            Points = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = "CreatedDuplicateTicket",
                            Deleted = false,
                            Enabled = true,
                            Points = -1
                        },
                        new
                        {
                            Id = 3,
                            Action = "MoveToDone",
                            Deleted = false,
                            Enabled = true,
                            Points = 1
                        },
                        new
                        {
                            Id = 4,
                            Action = "AddedComment",
                            Deleted = false,
                            Enabled = true,
                            Points = 1
                        },
                        new
                        {
                            Id = 5,
                            Action = "RemovedComment",
                            Deleted = false,
                            Enabled = true,
                            Points = -1
                        },
                        new
                        {
                            Id = 6,
                            Action = "LikedComment",
                            Deleted = false,
                            Enabled = true,
                            Points = 1
                        },
                        new
                        {
                            Id = 7,
                            Action = "DislikedComment",
                            Deleted = false,
                            Enabled = true,
                            Points = -1
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Description = "Analysis"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Description = "In progress"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Description = "In review"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Description = "Done"
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Effort")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "b79d6b4c-8ff6-42c6-ad76-38247bfc447b",
                            CreatedOn = new DateTime(2024, 1, 24, 20, 38, 8, 621, DateTimeKind.Local).AddTicks(9093),
                            CustomerId = 1,
                            Deleted = false,
                            Description = "internal ticket1",
                            Index = 1,
                            PriorityId = 1,
                            ProjectId = 1,
                            StatusId = 1,
                            Title = "IntTicket1",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "b79d6b4c-8ff6-42c6-ad76-38247bfc447b",
                            CreatedOn = new DateTime(2024, 1, 24, 20, 38, 8, 621, DateTimeKind.Local).AddTicks(9234),
                            CustomerId = 1,
                            Deleted = false,
                            Description = "internal ticket2",
                            Index = 2,
                            PriorityId = 2,
                            ProjectId = 1,
                            StatusId = 1,
                            Title = "IntTicket2",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "d19c9551-5000-48df-ad83-9e4ea8cba3e8",
                            CreatedOn = new DateTime(2024, 1, 24, 20, 38, 8, 621, DateTimeKind.Local).AddTicks(9240),
                            CustomerId = 1,
                            Deleted = false,
                            Description = "internal ticket3",
                            Index = 3,
                            PriorityId = 3,
                            ProjectId = 2,
                            StatusId = 1,
                            Title = "IntTicket3",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "eeb1bb63-6ee1-48d6-b025-7e1468dc59ca",
                            CreatedOn = new DateTime(2024, 1, 24, 20, 38, 8, 621, DateTimeKind.Local).AddTicks(9247),
                            CustomerId = 2,
                            Deleted = false,
                            Description = "Ticket Description1",
                            Index = 1,
                            PriorityId = 1,
                            ProjectId = 3,
                            StatusId = 1,
                            Title = "Ticket1",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "eeb1bb63-6ee1-48d6-b025-7e1468dc59ca",
                            CreatedOn = new DateTime(2024, 1, 24, 20, 38, 8, 621, DateTimeKind.Local).AddTicks(9253),
                            CustomerId = 2,
                            Deleted = false,
                            Description = "Ticket Description2",
                            Index = 2,
                            PriorityId = 4,
                            ProjectId = 3,
                            StatusId = 1,
                            Title = "Ticket2",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "eeb1bb63-6ee1-48d6-b025-7e1468dc59ca",
                            CreatedOn = new DateTime(2024, 1, 24, 20, 38, 8, 621, DateTimeKind.Local).AddTicks(9257),
                            CustomerId = 2,
                            Deleted = false,
                            Description = "Ticket Description3",
                            Index = 3,
                            PriorityId = 2,
                            ProjectId = 4,
                            StatusId = 1,
                            Title = "Ticket3",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("Kanban_RMR.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "Bug"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Description = "Feature"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Description = "Improvement"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cc5edb92-cf28-4862-a4f1-1a39f1b27761",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "082665b9-de26-40b0-a88b-cb46564edbf6",
                            Name = "user",
                            NormalizedName = "user"
                        },
                        new
                        {
                            Id = "07cd1428-b34e-45cc-8501-874e1d10255c",
                            Name = "employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "daf93f3f-45dd-40dc-ae46-b17eebf520e5",
                            RoleId = "cc5edb92-cf28-4862-a4f1-1a39f1b27761"
                        },
                        new
                        {
                            UserId = "b79d6b4c-8ff6-42c6-ad76-38247bfc447b",
                            RoleId = "cc5edb92-cf28-4862-a4f1-1a39f1b27761"
                        },
                        new
                        {
                            UserId = "b79d6b4c-8ff6-42c6-ad76-38247bfc447b",
                            RoleId = "07cd1428-b34e-45cc-8501-874e1d10255c"
                        },
                        new
                        {
                            UserId = "d19c9551-5000-48df-ad83-9e4ea8cba3e8",
                            RoleId = "07cd1428-b34e-45cc-8501-874e1d10255c"
                        },
                        new
                        {
                            UserId = "fb16d5f6-af58-45c5-836e-282359f8b193",
                            RoleId = "07cd1428-b34e-45cc-8501-874e1d10255c"
                        },
                        new
                        {
                            UserId = "eeb1bb63-6ee1-48d6-b025-7e1468dc59ca",
                            RoleId = "082665b9-de26-40b0-a88b-cb46564edbf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Kanban_RMR.Models.Comment", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", "KanbanUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Ticket", null)
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KanbanUser");
                });

            modelBuilder.Entity("Kanban_RMR.Models.KanbanUser", b =>
                {
                    b.HasOne("Kanban_RMR.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Kanban_RMR.Models.Project", b =>
                {
                    b.HasOne("Kanban_RMR.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", "KanbanUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.TicketType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("KanbanUser");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kanban_RMR.Models.KanbanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kanban_RMR.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
